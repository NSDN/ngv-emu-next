run <main>

.print<value> {
	prt value
}

.printInfo<a, b, c, d> {
	prt "Test Output:"

	out '\t'
	out "a is: "
	prt a

	out '\t'
	out "b is: "
	prt b

	out '\t'
	out "c is: "
	prt c

	out '\t'
	out "d is: "
	prt d
}

<par_run> {
	prt "Init core code..."
	code coreCode = (
		prt "Thread-", tid, " running!"

		mov r0, 0
		mov r1, arg
		mov r2, 0
	[loop_head]
		add r2, r0
		loop r0, r1, [loop_head]
		ret r2
	)

	prt "Init input args..."
	map args = M(
		mov r0, 0
		mov r1, 16
	[args_head]
		add r2, r0, 1
		mul r2, 2
		put r0, r2
		loop r0, r1, [args_head]
	)

	prt "Starting threads..."
	par r0, coreCode, args
	prt "Done."
	prt "\nResult is:"
	prt r0
	prt "Press any key to continue."
	in r0
}

<main> {
	map m1 = M(
		mov r0, 20
		mov r1, 0
	[head]
		mov r2, r1
		mul r2, r1
		put r1, r2
		loop r1, r0, [head]
	)

    use m1
    mov r0, 20
    mov r1, 0
[work]
    get r2, r1
    out r2
    out ", "
    loop r1, r0, [work]
	out '\n'

    code c = (
        run <test1>
        <test1> {
            prt "this is test1"
            run <test2>
        }
        <test2> {
            prt "this is test2"
            ret "done"
        }
    )
    
    eval r0, c
    out "result is "
    print<r0>

	prt "Marco Expandation Test"
	printInfo<0x32, 123.0F, 'A', "Gensokyo">

	prt "Test point ( 1, 2, 3 )"
    prt "Test seg { \"key\": \"value\" }"
	prt "\n"

	prt "Par-Run Test..."
	call <par_run>

    end
}
